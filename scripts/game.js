/* game.js - Logic for the Hyperbola Hunt mini-game */
document.addEventListener('DOMContentLoaded', () => {

    // --- DOM Elements ---
    const gamePlotDiv = document.getElementById('gamePlot');
    const instructionsDiv = document.getElementById('gameInstructions');
    const feedbackDiv = document.getElementById('gameFeedback');
    const startBtn = document.getElementById('startGameBtn');
    const nextHintBtn = document.getElementById('nextHintBtn');
    const toggleModeBtn = document.getElementById('toggleModeBtn'); // –ù–û–í–ê –ö–ù–û–ü–ö–ê

    // --- Game Settings ---
    const F1 = [-6, 1]; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∞—è–∫—ñ–≤ (—Ñ–æ–∫—É—Å—ñ–≤)
    const F2 = [6, -1]; 
    const F3 = [0, 8]; 
    const MAP_RANGE = 12; 
    const CLICK_TOLERANCE_FACTOR = 0.04; 

    // --- Game State ---
    let targetPoint = null;
    let distDiff12 = null;
    let distDiff23 = null;
    let gameStep = 0; 
    let gameMode = 'diff'; // 'diff' (–≥—ñ–ø–µ—Ä–±–æ–ª–∞) –∞–±–æ 'sum' (—Å–ø—Ä—è–∂–µ–Ω–∞ –≥—ñ–ø–µ—Ä–±–æ–ª–∞/–µ–ª—ñ–ø—Å)
    
    let hyperbola1Analysis = null;
    let hyperbola2Analysis = null;
    let currentTraces = []; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ traces, —â–æ–± Plotly.react –ø—Ä–∞—Ü—é–≤–∞–≤ –∫–æ—Ä–µ–∫—Ç–Ω–æ

    // --- Event Listeners ---
    if (startBtn) startBtn.addEventListener('click', startGame);
    if (nextHintBtn) nextHintBtn.addEventListener('click', showSecondHyperbola);
    if (toggleModeBtn) toggleModeBtn.addEventListener('click', toggleGameMode); // –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö

    if (gamePlotDiv) {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Plotly —Ç–∞ –ø—Ä–∏–≤'—è–∑–∫–∞ –∫–ª—ñ–∫–∞
        Plotly.newPlot(gamePlotDiv, [], getGameLayout(MAP_RANGE))
            .then(gd => {
                // –ü–†–ò–ú–£–°–û–í–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –°–õ–£–•–ê–ß–ê –ü–Ü–°–õ–Ø –ü–ï–†–®–û–á –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á
                gd.removeAllListeners('plotly_click'); 
                gd.on('plotly_click', handleGameClick);
            });
    }

    // --- Logic for Game Mode Toggle ---
    function toggleGameMode() {
        if (gameStep < 2) {
             feedbackDiv.textContent = '–°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞–π—Ç–µ –æ–±–∏–¥–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏.';
             feedbackDiv.style.color = '#ff6b6b';
             return;
        }

        gameMode = (gameMode === 'diff') ? 'sum' : 'diff';
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
        toggleModeBtn.textContent = (gameMode === 'diff') 
            ? '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –†–ï–ñ–ò–ú –°–£–ú–ò (–ï–ª—ñ–ø—Å)' 
            : '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –†–ï–ñ–ò–ú –†–Ü–ó–ù–ò–¶–Ü (–ì—ñ–ø–µ—Ä–±–æ–ª–∞)';
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
        instructionsDiv.innerHTML = (gameMode === 'diff') 
            ? `<b>–†–ï–ñ–ò–ú: –ì–Ü–ü–ï–†–ë–û–õ–ê</b>. –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –ø–µ—Ä–µ—Ç–∏–Ω—ñ —Å–∏–Ω—å–æ—ó —Ç–∞ —Ä–æ–∂–µ–≤–æ—ó –≥—ñ–ø–µ—Ä–±–æ–ª.`
            : `<b>–†–ï–ñ–ò–ú: –ï–õ–Ü–ü–°</b>. –®—É–∫–∞—î–º–æ –º—ñ—Å—Ü–µ, –¥–µ —Å—É–º–∏ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –¥–∞—é—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ (—ñ–Ω—à–∞ –≥—ñ–ª–∫–∞). –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –ø–µ—Ä–µ—Ç–∏–Ω—ñ –ª—ñ–Ω—ñ–π.`;

        // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ —Ü–µ —ñ–Ω—à–∏–π —Ä–µ–∂–∏–º
        plotGame(false); 
    }
    
    // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î –≤–µ—Å—å –≥—Ä–∞—Ñ—ñ–∫, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º
    function plotGame(isInitialSetup) {
        const traces = [];

        // 1. –ú–∞—è–∫–∏ –∑–∞–≤–∂–¥–∏ –ø–µ—Ä—à–∏–º–∏
        const beaconTrace = {
            x: [F1[0], F2[0], F3[0]],
            y: [F1[1], F2[1], F3[1]],
            mode: 'markers+text', type: 'scatter', name: '–ú–∞—è–∫–∏',
            text: ['F‚ÇÅ', 'F‚ÇÇ', 'F‚ÇÉ'], textposition: 'top center',
            marker: { size: 12, color: '#ff6b6b' }, hoverinfo: 'skip'
        };
        traces.push(beaconTrace);
        
        if (gameStep >= 1) {
            // 2. –ì—ñ–ø–µ—Ä–±–æ–ª–∞ 1
            const h1 = getHyperbolaAnalysis(F1, F2, distDiff12, gameMode);
            const trace1 = buildContourTrace(h1, '#00ffff', '–ì—ñ–ø–µ—Ä–±–æ–ª–∞ 1 (F1, F2)');
            traces.push(trace1);
        }
        
        if (gameStep >= 2) {
            // 3. –ì—ñ–ø–µ—Ä–±–æ–ª–∞ 2
            const h2 = getHyperbolaAnalysis(F2, F3, distDiff23, gameMode);
            const trace2 = buildContourTrace(h2, '#ff69b4', '–ì—ñ–ø–µ—Ä–±–æ–ª–∞ 2 (F2, F3)');
            traces.push(trace2);
        }

        // 4. –¶—ñ–ª—å–æ–≤–∞ —Ç–æ—á–∫–∞ (—è–∫—â–æ –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        if (gameStep === 3) {
            traces.push(markTargetPointTrace(targetPoint[0], targetPoint[1]));
        }

        currentTraces = traces;
        Plotly.react(gamePlotDiv, currentTraces, getGameLayout(MAP_RANGE));
    }


    // --- Game Functions ---

    function resetGame() {
        gameStep = 0;
        gameMode = 'diff';
        feedbackDiv.textContent = '';
        nextHintBtn.classList.add('hidden');
        toggleModeBtn.classList.add('hidden');
        startBtn.textContent = '–ü–æ—á–∞—Ç–∏ –≥—Ä—É';
        instructionsDiv.innerHTML = `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≥—Ä—É", —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à—É –ø—ñ–¥–∫–∞–∑–∫—É.`;
        Plotly.react(gamePlotDiv, [], getGameLayout(MAP_RANGE));
    }


    function startGame() {
        resetGame(); 
        startBtn.textContent = '–ù–æ–≤–∞ –≥—Ä–∞';

        // 1. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ü—ñ–ª—å–æ–≤—É —Ç–æ—á–∫—É
        targetPoint = [
            (Math.random() - 0.5) * MAP_RANGE * 1.5, 
            (Math.random() - 0.5) * MAP_RANGE * 1.5
        ];

        // 2. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—ñ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
        const dist = (p1, p2) => Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
        distDiff12 = Math.abs(dist(targetPoint, F1) - dist(targetPoint, F2));
        distDiff23 = Math.abs(dist(targetPoint, F2) - dist(targetPoint, F3));
        
        const distSum12 = dist(targetPoint, F1) + dist(targetPoint, F2);
        const distSum23 = dist(targetPoint, F2) + dist(targetPoint, F3);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä–æ–¥–∂–µ–Ω—ñ—Å—Ç—å —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–±—É–¥–æ–≤–∏
        if (distDiff12 >= dist(F1, F2) * 0.99 || distDiff23 >= dist(F2, F3) * 0.99 || distDiff12 < 1 || distDiff23 < 1) {
            startGame(); 
            return;
        }

        // 3. –ú–∞–ª—é—î–º–æ –≥—Ä—É
        gameStep = 1;
        plotGame(true);

        instructionsDiv.innerHTML = `<b>–ü–Ü–î–ö–ê–ó–ö–ê 1:</b> |PF‚ÇÅ| - |PF‚ÇÇ| = <b>${distDiff12.toFixed(2)}</b> –∫–º. –í–∏ –Ω–∞ —Å–∏–Ω—ñ–π –ª—ñ–Ω—ñ—ó.`;
        nextHintBtn.classList.remove('hidden');
        toggleModeBtn.classList.add('hidden');
    }

    function showSecondHyperbola() {
        if (gameStep !== 1) return;

        gameStep = 2;
        plotGame(false); // –ú–∞–ª—é—î–º–æ –¥—Ä—É–≥—É –≥—ñ–ø–µ—Ä–±–æ–ª—É
        
        instructionsDiv.innerHTML = `<b>–ü–Ü–î–ö–ê–ó–ö–ê 2:</b> |PF‚ÇÇ| - |PF‚ÇÉ| = <b>${distDiff23.toFixed(2)}</b> –∫–º.<br><b>–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—ñ –≤–∞—à–µ –π–º–æ–≤—ñ—Ä–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è!</b>`;
        nextHintBtn.classList.add('hidden');
        toggleModeBtn.classList.remove('hidden'); // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è
        feedbackDiv.textContent = '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É –ø–µ—Ä–µ—Ç–∏–Ω—É –≥—ñ–ø–µ—Ä–±–æ–ª.';
    }

    function handleGameClick(data) {
        if (gameStep !== 2 || !data.points || data.points.length === 0) return;

        const clickX = data.points[0].x;
        const clickY = data.points[0].y;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –º–∏ —à—É–∫–∞—î–º–æ
        let tolerance = MAP_RANGE * CLICK_TOLERANCE_FACTOR; 
        
        const dist = (p1, p2) => Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–≤–∞ –º–æ–∂–ª–∏–≤—ñ –ø–µ—Ä–µ—Ç–∏–Ω–∏ (–¥–ª—è –≥—ñ–ø–µ—Ä–±–æ–ª, —Ü–µ –º–∞—î –±—É—Ç–∏ —Ç–æ–π, —â–æ –±–ª–∏–∂—á–∏–π –¥–æ –Ω–∞—à–æ—ó —Ü—ñ–ª—å–æ–≤–æ—ó —Ç–æ—á–∫–∏)
        // –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–¥—ñ—É—Å—ñ –¥–æ–ø—É—Å–∫—É –≤—ñ–¥ —Ü—ñ–ª—å–æ–≤–æ—ó —Ç–æ—á–∫–∏
        const distanceToTarget = Math.hypot(clickX - targetPoint[0], clickY - targetPoint[1]);
        

        if (distanceToTarget < tolerance) {
            feedbackDiv.textContent = `üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: [${targetPoint[0].toFixed(2)}, ${targetPoint[1].toFixed(2)}]`;
            feedbackDiv.style.color = '#84fab0'; 
            gameStep = 3; 
            plotGame(false); // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–ª—å
            startBtn.textContent = '–ó—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑';
            toggleModeBtn.classList.add('hidden');
        } else {
            feedbackDiv.textContent = `ü§î –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! –ü–æ—Ö–∏–±–∫–∞: ${distanceToTarget.toFixed(2)} –∫–º. (–î–æ–ø—É—Å–∫: ${tolerance.toFixed(2)} –∫–º)`;
            feedbackDiv.style.color = '#ffeb3b'; 
            
            // –î–æ–¥–∞—î–º–æ –º–∞—Ä–∫–µ—Ä, –¥–µ –∫–ª—ñ–∫–Ω—É–≤ –≥—Ä–∞–≤–µ—Ü—å (traceIndex 3, –ø—ñ—Å–ª—è –¥–≤–æ—Ö –≥—ñ–ø–µ—Ä–±–æ–ª)
            const clickTrace = {
                 x: [clickX],
                 y: [clickY],
                 mode: 'markers',
                 type: 'scatter',
                 name: '–í–∞—à –∫–ª—ñ–∫',
                 marker: { symbol: 'circle', size: 10, color: '#ff6b6b' },
                 hoverinfo: 'text',
                 text: [`–ö–ª—ñ–∫ [${clickX.toFixed(2)}, ${clickY.toFixed(2)}]`]
             };
             if (gamePlotDiv.data.length > 3) {
                 Plotly.restyle(gamePlotDiv, clickTrace, 3);
             } else {
                 Plotly.addTraces(gamePlotDiv, clickTrace);
             }
        }
    }

    // --- Helper Functions ---

    /**
     * Calculates the general equation parameters based on two foci and the constant (diff or sum).
     */
    function getHyperbolaAnalysis(f1, f2, constant, mode = 'diff') {
        const c = Math.hypot(f1[0] - f2[0], f1[1] - f2[1]) / 2;
        const center = { x: (f1[0] + f2[0]) / 2, y: (f1[1] + f2[1]) / 2 };
        const dx = f2[0] - f1[0];
        const dy = f2[1] - f1[1];
        const angleRad = Math.atan2(dy, dx); 
        const cos = Math.cos(angleRad);
        const sin = Math.sin(angleRad);

        let a, b2, sign;

        if (mode === 'diff') { // –ì—ñ–ø–µ—Ä–±–æ–ª–∞: |PF1 - PF2| = 2a (constant)
            a = constant / 2;
            if (c <= a) return null;
            b2 = c * c - a * a;
            sign = -1; // x^2/a^2 - y^2/b^2 = 1
        } else { // –ï–ª—ñ–ø—Å (–°–ø—Ä—è–∂–µ–Ω–∞ –≥—ñ–ø–µ—Ä–±–æ–ª–∞): |PF1 + PF2| = 2a (constant)
            a = constant / 2;
            if (c >= a) return null; // Foci must be inside
            b2 = a * a - c * c;
            sign = 1; // x^2/a^2 + y^2/b^2 = 1
        }

        const a2 = a*a;
        const cos2 = cos*cos;
        const sin2 = sin*sin;
        const sincos = sin*cos;

        // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–æ–∑–≤–æ—Ä–æ—Ç—É: Q = R^T * M * R
        // M = [[sign/a^2, 0], [0, 1/b^2]] -> (–¥–ª—è –≥—ñ–ø–µ—Ä–±–æ–ª–∏: sign=-1 –¥–ª—è b^2, —Ç—É—Ç –≤–∂–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ)
        
        // –í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è–Ω–Ω—è
        let A_rot, C_rot;
        if (mode === 'diff') {
             // –ì—ñ–ø–µ—Ä–±–æ–ª–∞: (cos^2/a^2 - sin^2/b^2)x^2 + 2...xy + (sin^2/a^2 - cos^2/b^2)y^2
             A_rot = cos2 / a2 - sin2 / b2;
             C_rot = sin2 / a2 - cos2 / b2;
        } else {
             // –ï–ª—ñ–ø—Å: (cos^2/a^2 + sin^2/b^2)x^2 + 2...xy + (sin^2/a^2 + cos^2/b^2)y^2
             A_rot = cos2 / a2 + sin2 / b2;
             C_rot = sin2 / a2 + cos2 / b2;
        }

        const B_rot = 2 * sincos * (1 / a2 - 1 / b2); // –ó–∞–≥–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è B
        
        // D, E, F –ø—ñ—Å–ª—è –ø–µ—Ä–µ–Ω–æ—Å—É (Ax^2 + Bxy + Cy^2 + Dx + Ey + F = 0)
        const D = -2 * A_rot * centerX - B_rot * centerY;
        const E = -B_rot * centerX - 2 * C_rot * centerY;
        const F = A_rot * centerX * centerX + B_rot * centerX * centerY + C_rot * centerY * centerY - 1;

        const parsed = { A: A_rot, B: B_rot, C: C_rot, D: D, E: E, F: F };

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Solver.analyzeGeneral –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞
        return Solver.analyzeGeneral(parsed);
    }
    
    // –°—Ç–≤–æ—Ä—é—î Plotly trace –¥–ª—è –∫–æ–Ω—Ç—É—Ä—É
    function buildContourTrace(analysis, color, name) {
        const { parsed } = analysis;
        const dataRange = MAP_RANGE * 25; 
        const N = 501; 
        const grid = buildGrid(parsed.A, parsed.B, parsed.C, parsed.D, parsed.E, parsed.F, dataRange, N);

        return {
            x: grid.x, y: grid.y, z: grid.z,
            type: 'contour', name: name,
            contours: { start: 0, end: 0, size: 1, coloring: 'none' }, 
            line: { color: color, width: 3, smoothing: 1.0 }, 
            showscale: false, hoverinfo: 'none', opacity: 0.9
        };
    }

    /**
     * Creates a trace for the final target point.
     */
     function markTargetPointTrace(x, y) {
         return {
             x: [x],
             y: [y],
             mode: 'markers',
             type: 'scatter',
             name: '–í–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è',
             marker: {
                 symbol: 'star', 
                 size: 20,
                 color: '#84fab0', 
                 line: {
                    color: '#0d1b2a',
                    width: 3
                 }
             },
             hoverinfo: 'text',
             text: [`–ü–æ–∑–∏—Ü—ñ—è: [${x.toFixed(2)}, ${y.toFixed(2)}]`]
         };
     }


    /**
     * Basic Plotly layout for the game.
     */
    function getGameLayout(range) {
        const isLight = document.body.classList.contains('theme-light');
        const axisColor = isLight ? '#333' : '#9aa4ad';
        const gridColor = isLight ? '#eee' : 'rgba(255,255,255,0.08)';
        const bgColor = isLight ? '#f7fbff' : '#0d1b2a'; 
        return {
            xaxis: { range: [-range, range], showgrid: true, zeroline: true, zerolinewidth: 1.5, zerolinecolor: axisColor, tickfont: { color: axisColor }, gridcolor: gridColor },
            yaxis: { range: [-range, range], showgrid: true, zeroline: true, zerolinewidth: 1.5, zerolinecolor: axisColor, tickfont: { color: axisColor }, scaleanchor: 'x', scaleratio: 1, gridcolor: gridColor },
            plot_bgcolor: bgColor, 
            paper_bgcolor: 'rgba(0,0,0,0)', 
            margin: { l: 40, r: 20, t: 30, b: 40 },
            showlegend: false,
            hovermode: 'closest', 
            clickmode: 'event'
        };
    }

    // Helper: Needed by plotGameHyperbola
    function buildGrid(A,B,C,D,E,F, range, N){
        const x = Array.from({length: N}, (_, i) => -range + 2*range*i/(N-1));
        const y = [...x];
        const z = y.map(yi => x.map(xi => Math.fround(A*xi*xi + B*xi*yi + C*yi*yi + D*xi + E*yi + F)));
        return {x, y, z};
    }

}); // End DOMContentLoaded